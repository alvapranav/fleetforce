"""Create tables

Revision ID: bdf85fa870ca
Revises: 
Create Date: 2024-11-13 03:47:51.060665

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'bdf85fa870ca'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('places',
    sa.Column('hash_index', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('geometry', sa.String(), nullable=True),
    sa.Column('amenity', sa.String(), nullable=True),
    sa.Column('building', sa.String(), nullable=True),
    sa.Column('shop', sa.String(), nullable=True),
    sa.Column('highway', sa.String(), nullable=True),
    sa.Column('latitude', sa.Float(), nullable=True),
    sa.Column('longitude', sa.Float(), nullable=True),
    sa.PrimaryKeyConstraint('hash_index')
    )
    op.create_index(op.f('ix_places_hash_index'), 'places', ['hash_index'], unique=False)
    op.create_index(op.f('ix_places_latitude'), 'places', ['latitude'], unique=False)
    op.create_index(op.f('ix_places_longitude'), 'places', ['longitude'], unique=False)
    op.create_table('stops',
    sa.Column('tractor_id', sa.String(), nullable=False),
    sa.Column('trip_id', sa.String(), nullable=False),
    sa.Column('stop_type', sa.String(), nullable=False),
    sa.Column('latitude', sa.Float(), nullable=True),
    sa.Column('longitude', sa.Float(), nullable=True),
    sa.Column('arrival_datetime', sa.String(), nullable=False),
    sa.Column('departure_datetime', sa.String(), nullable=True),
    sa.Column('miles_travelled', sa.Float(), nullable=True),
    sa.Column('dwell_time', sa.Float(), nullable=True),
    sa.Column('fuel_latitude', sa.Float(), nullable=True),
    sa.Column('fuel_longitude', sa.Float(), nullable=True),
    sa.Column('fuel_tank_percent_before', sa.Float(), nullable=True),
    sa.Column('fuel_tank_percent_after', sa.Float(), nullable=True),
    sa.Column('fuel_location_name', sa.String(), nullable=True),
    sa.Column('unit_price', sa.Float(), nullable=True),
    sa.Column('total_cost', sa.Float(), nullable=True),
    sa.Column('quantity', sa.Float(), nullable=True),
    sa.Column('city', sa.String(), nullable=True),
    sa.Column('state', sa.String(), nullable=True),
    sa.Column('is_warehouse', sa.String(), nullable=True),
    sa.Column('nearest1_name', sa.String(), nullable=True),
    sa.Column('nearest1_amenity', sa.String(), nullable=True),
    sa.Column('nearest1_building', sa.String(), nullable=True),
    sa.Column('nearest1_shop', sa.String(), nullable=True),
    sa.Column('nearest1_highway', sa.String(), nullable=True),
    sa.Column('nearest1_latitude', sa.Float(), nullable=True),
    sa.Column('nearest1_longitude', sa.Float(), nullable=True),
    sa.Column('nearest1_geometry', sa.String(), nullable=True),
    sa.Column('nearest2_name', sa.String(), nullable=True),
    sa.Column('nearest2_amenity', sa.String(), nullable=True),
    sa.Column('nearest2_building', sa.String(), nullable=True),
    sa.Column('nearest2_shop', sa.String(), nullable=True),
    sa.Column('nearest2_highway', sa.String(), nullable=True),
    sa.Column('nearest2_latitude', sa.Float(), nullable=True),
    sa.Column('nearest2_longitude', sa.Float(), nullable=True),
    sa.Column('nearest2_geometry', sa.String(), nullable=True),
    sa.Column('nearest3_name', sa.String(), nullable=True),
    sa.Column('nearest3_amenity', sa.String(), nullable=True),
    sa.Column('nearest3_building', sa.String(), nullable=True),
    sa.Column('nearest3_shop', sa.String(), nullable=True),
    sa.Column('nearest3_highway', sa.String(), nullable=True),
    sa.Column('nearest3_latitude', sa.Float(), nullable=True),
    sa.Column('nearest3_longitude', sa.Float(), nullable=True),
    sa.Column('nearest3_geometry', sa.String(), nullable=True),
    sa.Column('nearest4_name', sa.String(), nullable=True),
    sa.Column('nearest4_amenity', sa.String(), nullable=True),
    sa.Column('nearest4_building', sa.String(), nullable=True),
    sa.Column('nearest4_shop', sa.String(), nullable=True),
    sa.Column('nearest4_highway', sa.String(), nullable=True),
    sa.Column('nearest4_latitude', sa.Float(), nullable=True),
    sa.Column('nearest4_longitude', sa.Float(), nullable=True),
    sa.Column('nearest4_geometry', sa.String(), nullable=True),
    sa.Column('nearest5_name', sa.String(), nullable=True),
    sa.Column('nearest5_amenity', sa.String(), nullable=True),
    sa.Column('nearest5_building', sa.String(), nullable=True),
    sa.Column('nearest5_shop', sa.String(), nullable=True),
    sa.Column('nearest5_highway', sa.String(), nullable=True),
    sa.Column('nearest5_latitude', sa.Float(), nullable=True),
    sa.Column('nearest5_longitude', sa.Float(), nullable=True),
    sa.Column('nearest5_geometry', sa.String(), nullable=True),
    sa.Column('type_new', sa.String(), nullable=True),
    sa.Column('near_mechanic', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('tractor_id', 'trip_id', 'stop_type', 'arrival_datetime')
    )
    op.create_index(op.f('ix_stops_arrival_datetime'), 'stops', ['arrival_datetime'], unique=False)
    op.create_index(op.f('ix_stops_stop_type'), 'stops', ['stop_type'], unique=False)
    op.create_index(op.f('ix_stops_tractor_id'), 'stops', ['tractor_id'], unique=False)
    op.create_index(op.f('ix_stops_trip_id'), 'stops', ['trip_id'], unique=False)
    op.create_table('trips',
    sa.Column('tractor_id', sa.String(), nullable=False),
    sa.Column('trip_id', sa.String(), nullable=False),
    sa.Column('country', sa.String(), nullable=True),
    sa.Column('state', sa.String(), nullable=True),
    sa.Column('city', sa.String(), nullable=True),
    sa.Column('address', sa.String(), nullable=True),
    sa.Column('postal_code', sa.String(), nullable=True),
    sa.Column('latitude', sa.Float(), nullable=True),
    sa.Column('longitude', sa.Float(), nullable=True),
    sa.Column('odometer', sa.Float(), nullable=True),
    sa.Column('load_status', sa.String(), nullable=True),
    sa.Column('to_state', sa.String(), nullable=True),
    sa.Column('to_city', sa.String(), nullable=True),
    sa.Column('to_country', sa.String(), nullable=True),
    sa.Column('to_address', sa.String(), nullable=True),
    sa.Column('to_postal_code', sa.String(), nullable=True),
    sa.Column('to_latitude', sa.Float(), nullable=True),
    sa.Column('to_longitude', sa.Float(), nullable=True),
    sa.Column('arrival_datetime', sa.String(), nullable=False),
    sa.Column('to_arrival_datetime', sa.String(), nullable=True),
    sa.Column('trip_ref_norm', sa.String(), nullable=True),
    sa.Column('gps', sa.JSON(), nullable=True),
    sa.Column('fuel', sa.JSON(), nullable=True),
    sa.Column('unit_tank', sa.Float(), nullable=True),
    sa.PrimaryKeyConstraint('tractor_id', 'trip_id', 'arrival_datetime')
    )
    op.create_index(op.f('ix_trips_arrival_datetime'), 'trips', ['arrival_datetime'], unique=False)
    op.create_index(op.f('ix_trips_tractor_id'), 'trips', ['tractor_id'], unique=False)
    op.create_index(op.f('ix_trips_trip_id'), 'trips', ['trip_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_trips_trip_id'), table_name='trips')
    op.drop_index(op.f('ix_trips_tractor_id'), table_name='trips')
    op.drop_index(op.f('ix_trips_arrival_datetime'), table_name='trips')
    op.drop_table('trips')
    op.drop_index(op.f('ix_stops_trip_id'), table_name='stops')
    op.drop_index(op.f('ix_stops_tractor_id'), table_name='stops')
    op.drop_index(op.f('ix_stops_stop_type'), table_name='stops')
    op.drop_index(op.f('ix_stops_arrival_datetime'), table_name='stops')
    op.drop_table('stops')
    op.drop_index(op.f('ix_places_longitude'), table_name='places')
    op.drop_index(op.f('ix_places_latitude'), table_name='places')
    op.drop_index(op.f('ix_places_hash_index'), table_name='places')
    op.drop_table('places')
    # ### end Alembic commands ###
